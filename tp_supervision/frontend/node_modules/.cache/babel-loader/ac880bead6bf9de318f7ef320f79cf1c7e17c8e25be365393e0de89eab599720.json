{"ast":null,"code":"var _jsxFileName = \"/home/bonice/Bureau/projet/projettp/test/TP_surveillance_reseau/tp_supervision/frontend/src/components/dataTable.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { DataTable } from 'primereact/datatable';\n// import { Column } from 'primereact/column';\n// import 'primereact/resources/themes/lara-light-indigo/theme.css';\n// import 'primereact/resources/primereact.min.css';\n// import 'primeicons/primeicons.css';\n\n// function MyDataTable() {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     fetch('/donnees.json')\n//       .then(response => response.json())\n//       .then(data => setData(data))\n//       .catch(error => console.error('Erreur lors de la récupération des données !', error));\n//   }, []);\n\n//   return (\n//     <div className=\"container\">\n//       <h2 className=\"text-center mb-4\">Tableau de données</h2>\n//       <DataTable value={data} responsiveLayout=\"stack\" breakpoint=\"960px\">\n//         {/* <Column field=\"id\" header=\"ID\" sortable></Column>\n//         <Column field=\"machine_id\" header=\"ID Machine\" sortable></Column> */}\n//         <Column field=\"timestamp\" header=\"Timestamp\" sortable>\n//           {rowData => new Date(rowData.timestamp).toLocaleString()}\n//         </Column>\n//         <Column field=\"used_memory\" header=\"Mémoire utilisée\" sortable></Column>\n//         <Column field=\"memory_percentage\" header=\"Pourcentage de mémoire\" sortable></Column>\n//         <Column field=\"cached_memory\" header=\"Mémoire mise en cache\" sortable></Column>\n//         <Column field=\"swap_total\" header=\"Total du swap\" sortable></Column>\n//         <Column field=\"swap_used\" header=\"Swap utilisé\" sortable></Column>\n//         <Column field=\"swap_percentage\" header=\"Pourcentage de swap\" sortable></Column>\n//         <Column field=\"used_disk\" header=\"Disque utilisé\" sortable></Column>\n//         <Column field=\"disk_percentage\" header=\"Pourcentage de disque\" sortable></Column>\n//         <Column field=\"cpu_load_per_core\" header=\"Charge CPU par cœur\" sortable></Column>\n//         <Column field=\"net_bytes_sent\" header=\"Octets réseau envoyés\" sortable></Column>\n//         <Column field=\"net_bytes_recv\" header=\"Octets réseau reçus\" sortable></Column>\n//         <Column field=\"active_processes\" header=\"Processus actifs\" sortable></Column>\n//       </DataTable>\n//     </div>\n//   );\n// }\n\n// export default MyDataTable;import React, { useEffect, useState } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport './datatable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomDataTable() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('/donnees.json') // Assurez-vous de spécifier correctement l'URL de votre fichier JSON\n    .then(response => response.json()).then(data => setData(data)).catch(error => console.error('Erreur lors de la récupération des données !', error));\n  }, []);\n  const dateBodyTemplate = rowData => {\n    return new Date(rowData.timestamp).toLocaleString();\n  };\n  const sizeBodyTemplate = size => {\n    if (size < 1024) return `${size} B`;else if (size < 1048576) return `${(size / 1024).toFixed(2)} KB`;else if (size < 1073741824) return `${(size / 1048576).toFixed(2)} MB`;else return `${(size / 1073741824).toFixed(2)} GB`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"datatable-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"Tableau de Donn\\xE9es Variables\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      value: data,\n      responsiveLayout: \"scroll\",\n      className: \"p-datatable-custom\",\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        field: \"timestamp\",\n        header: \"Timestamp\",\n        body: dateBodyTemplate,\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"used_memory\",\n        header: \"M\\xE9moire utilis\\xE9e\",\n        body: rowData => sizeBodyTemplate(rowData.used_memory),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"memory_percentage\",\n        header: \"Pourcentage de m\\xE9moire\",\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"cached_memory\",\n        header: \"M\\xE9moire mise en cache\",\n        body: rowData => sizeBodyTemplate(rowData.cached_memory),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"swap_total\",\n        header: \"Total du swap\",\n        body: rowData => sizeBodyTemplate(rowData.swap_total),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"swap_used\",\n        header: \"Swap utilis\\xE9\",\n        body: rowData => sizeBodyTemplate(rowData.swap_used),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"swap_percentage\",\n        header: \"Pourcentage de swap\",\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"used_disk\",\n        header: \"Disque utilis\\xE9\",\n        body: rowData => sizeBodyTemplate(rowData.used_disk),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"disk_percentage\",\n        header: \"Pourcentage de disque\",\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"cpu_load_per_core\",\n        header: \"Charge CPU par c\\u0153ur\",\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"net_bytes_sent\",\n        header: \"Octets r\\xE9seau envoy\\xE9s\",\n        body: rowData => sizeBodyTemplate(rowData.net_bytes_sent),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"net_bytes_recv\",\n        header: \"Octets r\\xE9seau re\\xE7us\",\n        body: rowData => sizeBodyTemplate(rowData.net_bytes_recv),\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"active_processes\",\n        header: \"Processus actifs\",\n        sortable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomDataTable, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = CustomDataTable;\nexport default CustomDataTable;\nvar _c;\n$RefreshReg$(_c, \"CustomDataTable\");","map":{"version":3,"names":["React","useEffect","useState","DataTable","Column","jsxDEV","_jsxDEV","CustomDataTable","_s","data","setData","fetch","then","response","json","catch","error","console","dateBodyTemplate","rowData","Date","timestamp","toLocaleString","sizeBodyTemplate","size","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","responsiveLayout","field","header","body","sortable","used_memory","cached_memory","swap_total","swap_used","used_disk","net_bytes_sent","net_bytes_recv","_c","$RefreshReg$"],"sources":["/home/bonice/Bureau/projet/projettp/test/TP_surveillance_reseau/tp_supervision/frontend/src/components/dataTable.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { DataTable } from 'primereact/datatable';\n// import { Column } from 'primereact/column';\n// import 'primereact/resources/themes/lara-light-indigo/theme.css';\n// import 'primereact/resources/primereact.min.css';\n// import 'primeicons/primeicons.css';\n\n// function MyDataTable() {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     fetch('/donnees.json')\n//       .then(response => response.json())\n//       .then(data => setData(data))\n//       .catch(error => console.error('Erreur lors de la récupération des données !', error));\n//   }, []);\n\n//   return (\n//     <div className=\"container\">\n//       <h2 className=\"text-center mb-4\">Tableau de données</h2>\n//       <DataTable value={data} responsiveLayout=\"stack\" breakpoint=\"960px\">\n//         {/* <Column field=\"id\" header=\"ID\" sortable></Column>\n//         <Column field=\"machine_id\" header=\"ID Machine\" sortable></Column> */}\n//         <Column field=\"timestamp\" header=\"Timestamp\" sortable>\n//           {rowData => new Date(rowData.timestamp).toLocaleString()}\n//         </Column>\n//         <Column field=\"used_memory\" header=\"Mémoire utilisée\" sortable></Column>\n//         <Column field=\"memory_percentage\" header=\"Pourcentage de mémoire\" sortable></Column>\n//         <Column field=\"cached_memory\" header=\"Mémoire mise en cache\" sortable></Column>\n//         <Column field=\"swap_total\" header=\"Total du swap\" sortable></Column>\n//         <Column field=\"swap_used\" header=\"Swap utilisé\" sortable></Column>\n//         <Column field=\"swap_percentage\" header=\"Pourcentage de swap\" sortable></Column>\n//         <Column field=\"used_disk\" header=\"Disque utilisé\" sortable></Column>\n//         <Column field=\"disk_percentage\" header=\"Pourcentage de disque\" sortable></Column>\n//         <Column field=\"cpu_load_per_core\" header=\"Charge CPU par cœur\" sortable></Column>\n//         <Column field=\"net_bytes_sent\" header=\"Octets réseau envoyés\" sortable></Column>\n//         <Column field=\"net_bytes_recv\" header=\"Octets réseau reçus\" sortable></Column>\n//         <Column field=\"active_processes\" header=\"Processus actifs\" sortable></Column>\n//       </DataTable>\n//     </div>\n//   );\n// }\n\n// export default MyDataTable;import React, { useEffect, useState } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport './datatable.css';\n\nfunction CustomDataTable() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('/donnees.json') // Assurez-vous de spécifier correctement l'URL de votre fichier JSON\n      .then(response => response.json())\n      .then(data => setData(data))\n      .catch(error => console.error('Erreur lors de la récupération des données !', error));\n  }, []);\n\n  const dateBodyTemplate = (rowData) => {\n    return new Date(rowData.timestamp).toLocaleString();\n  };\n\n  const sizeBodyTemplate = (size) => {\n    if (size < 1024) return `${size} B`;\n    else if (size < 1048576) return `${(size / 1024).toFixed(2)} KB`;\n    else if (size < 1073741824) return `${(size / 1048576).toFixed(2)} MB`;\n    else return `${(size / 1073741824).toFixed(2)} GB`;\n  };\n\n  return (\n    <div className=\"datatable-container\">\n      <h2 className=\"text-center mb-4\">Tableau de Données Variables</h2>\n      <DataTable value={data} responsiveLayout=\"scroll\" className=\"p-datatable-custom\">\n        {/* <Column field=\"id\" header=\"ID\" sortable></Column>\n        <Column field=\"machine_id\" header=\"ID Machine\" sortable></Column> */}\n        <Column field=\"timestamp\" header=\"Timestamp\" body={dateBodyTemplate} sortable></Column>\n        <Column field=\"used_memory\" header=\"Mémoire utilisée\" body={(rowData) => sizeBodyTemplate(rowData.used_memory)} sortable></Column>\n        <Column field=\"memory_percentage\" header=\"Pourcentage de mémoire\" sortable></Column>\n        <Column field=\"cached_memory\" header=\"Mémoire mise en cache\" body={(rowData) => sizeBodyTemplate(rowData.cached_memory)} sortable></Column>\n        <Column field=\"swap_total\" header=\"Total du swap\" body={(rowData) => sizeBodyTemplate(rowData.swap_total)} sortable></Column>\n        <Column field=\"swap_used\" header=\"Swap utilisé\" body={(rowData) => sizeBodyTemplate(rowData.swap_used)} sortable></Column>\n        <Column field=\"swap_percentage\" header=\"Pourcentage de swap\" sortable></Column>\n        <Column field=\"used_disk\" header=\"Disque utilisé\" body={(rowData) => sizeBodyTemplate(rowData.used_disk)} sortable></Column>\n        <Column field=\"disk_percentage\" header=\"Pourcentage de disque\" sortable></Column>\n        <Column field=\"cpu_load_per_core\" header=\"Charge CPU par cœur\" sortable></Column>\n        <Column field=\"net_bytes_sent\" header=\"Octets réseau envoyés\" body={(rowData) => sizeBodyTemplate(rowData.net_bytes_sent)} sortable></Column>\n        <Column field=\"net_bytes_recv\" header=\"Octets réseau reçus\" body={(rowData) => sizeBodyTemplate(rowData.net_bytes_recv)} sortable></Column>\n        <Column field=\"active_processes\" header=\"Processus actifs\" sortable></Column>\n      </DataTable>\n    </div>\n  );\n}\n\nexport default CustomDataTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}